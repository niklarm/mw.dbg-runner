[def __program__options [@http://www.boost.org/doc/libs/release/doc/html/program_options.html boost.program_options]]

[section:extension Extension manual]
[section:build How to build]

[important If you want to build plugins, you need to use a compiler, with a compatible C++ ABI, to
the one the `db-runner` was build in.]

In order to build this library you need boost and it's build system. 
Additionally you need to get [@https://github.com/klemens-morgenstern/boost-process boost.process],
which is put into your boost installation, into `boost/libs/process`.[footnote `boost.process` will
be part of boost 1.64]. If you are on windows, you also need to overwrite `boost/libs/winapi` with the
[@https://github.com/boostorg/winapi current version].

To build the system, you need to build `boost.build` manually. For details look [@http://www.boost.org/doc/libs/1_62_0/more/getting_started/windows.html here].

[note You don't need to build boost, our build-script will take care of that.]

In order to build our library you need to call `b2` in the root of the super-project.

Your plugins only have a binary depency on __program__options__ if you use such options, elsewise there is none.

[note Out build-script will put the used `boost_program_options` binary in our release folder.]
[endsect]

[section:basic Building a plugin]

[def mw::debug::break_point  [classref mw::debug::break_point mw::debug::break_point]]
[def mw::debug::frame  [classref mw::debug::break_point mw::debug::frame]]
[def std::unique_ptr  [@http://en.cppreference.com/w/cpp/memory/unique_ptr std::unique_ptr]]
[def std::vector  [@http://en.cppreference.com/w/cpp/container/vector std::vector]]
[def std::string  [@http://en.cppreference.com/w/cpp/container/string std::string]]
[def boost::program_options::options_description  [@http://www.boost.org/doc/libs/release/doc/html/boost/program_options/options_description.html boost::program_options::options_description]]

Your plugin only needs to implement the break_points you want to use and return them in a specially named function, given below.

    std::vector<std::unique_ptr<mw::debug::break_point>> mw_dbg_setup_bps();

This function will return your [classref mw::debug::break_point break_point] implementations.

Additionally you can add program options that shall be passed to your plugin you need to add another function, which looks like this.

    boost::program_options::options_description mw_gdb_setup_options();

This function will return your added program options.

To assert the function signatures and linkage is correct, the functions are declared in 
[headerref mw/debug/plugin.hpp mw/debug/plugin.hpp], which you should include.

[note You can use global variables without any problems, since the library is dynamically loaded. 
That means that there will be no link-conflicts.]
    
[endsect]
[section:examples Examples]

To demonstrate how this works, we will go over our plugins as examples.

[section:exit_code Exit Code]

[def set_exit [memberref mw::debug::frame::set_exit set_exit]]
[def fr.set_exit [memberref mw::debug::frame::set_exit fr.set_exit]]

In embedded systems with newlib, there is a function `_exit(int)` which allows to capture the return value
of `main`. So we have the following function in the code, which get's called at the end of the program:

```
    void _exit(int value)
    {
    }
```

What we want to do is to put a breakpoint into this function and forward the value passed to the host. The declaration of the breakpoint is as simple as this.

[def fr.select [memberref mw::debug::frame::select select]]
[def fr.arg_list [memberref mw::debug::frame::arg_list arg_list]]
[def fr.log [memberref mw::debug::frame::log fr.log]]
[def fr.get_cstring [memberref mw::debug::frame::get_cstring fr.get_cstring]]
[def std::stoi [@http://en.cppreference.com/w/cpp/string/basic_string/stol std::stoi]]

[import ../src/mw-exitcode.cpp]
[exit_stub_decl]

So we have a breakpoint declared, which may of course contain other members, but none are needed here. Now the implementation of the function looks as follows.

[exit_stub_invoke]
[note If you have other overloads of `_exit` gdb will put a breakpoint into each one, if not explicit (e.g. `"_exit(int)"`).] 

Our example includes writing to the `gdb-runner` log. It is accessed through fr.log, which returns an [@http://en.cppreference.com/w/cpp/io/basic_ostream std::ostream] reference.
What happens here, is that we obtain the argument list with fr.arg_list and access the first member of it. 
This is converted to an `int` with std::stoi and then passed to the `gdb-runner` with set_exit.

[warning The function set_exit is only provided for exactly this purpose.]

As a last step we need to export our breakpoint specialization.

[exit_stub_export]

[note You can export several breakpoint, which is why it returns an std::vector.] 

[endsect]
[section:test Test library]
Since we have established that a plugin can be created very easily, we will demonstrated some of the more elaborate functionality. 
We will implement a small test library, similar to what our test-backend does. We will however only implement one test.

The test we want to have is a comparison, which also prints out the values of the passed types and the position. In order to do this, we use a macro and a function,
so the location get's recorded automatically.

[note We do not use a template here, because this would lead to a breakpoint for every instanciation. This leads to problems on embedded devices.]

[def __FILE__ [@http://en.cppreference.com/w/cpp/preprocessor/replace __FILE__]]
[def __LINE__ [@http://en.cppreference.com/w/cpp/preprocessor/replace __LINE__]]

[import ../example/test_equal_target.cpp]
[test_equal_target_def]
    
As an example call we'll have this code.

[test_equal_target_main]
    
Ok, so let's start with the plugin:

[import ../example/test_equal.cpp]
[test_equal_def]

So except for the explicit setting of the function name, there's nothing special here. Now for the [memberref mw::debug::frame::invoke invoke] function, we first
obtain the values. 

[test_equal_invoke_1]

Thus far there's nothing special, we just get the values passed to the function, utilizing the convenience overload of [memberref mw::debug::frame::arg_list arg_list]
and the [memberref mw::debug::frame::get_cstring get_cstring] function, to get the string values.

Now what we want to do, is to get the actual values of `x` and `y`. Now they are defined by their names in the higher frame, i.e. in `main` for the example.
So what our plugin does is: it steps into the next higher frame, prints the values and then resets the frame. 

[test_equal_invoke_2]

And as a last step we output everything to the console.

[test_equal_invoke_3]

Which would output 

    test_equal_target.cpp(13) equality test [x == y] failed: [1 == -1]
    
[endsect]
[endsect]
[endsect]