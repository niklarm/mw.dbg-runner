[def __program__options [@http://www.boost.org/doc/libs/release/doc/html/program_options.html boost.program_options]]

[section:extension Extension manual]
[section:build How to build]

[important If you want to build plugins, you need to use a compiler, with a compatible C++ ABI, to
the one the `gbd-runner` was build in.]

In order to build this library you need boost and it's build system. 
Additionally you need to get [@https://github.com/klemens-morgenstern/boost-process boost.process],
which is put into your boost installation, into `boost/libs/process`.[footnote `boost.process` will
be part of boost 1.64]. If you are on windows, you also need to overwrite `boost/libs/winapi` with the
[@https://github.com/boostorg/winapi current version].

To build the system, you need to build `boost.build` manually. For details look [@http://www.boost.org/doc/libs/1_62_0/more/getting_started/windows.html here].

[note You don't need to build boost, our build-script will take care of that.]

In order to build our library you need to call `b2` in the root of the super-project.

Your plugins only have a binary depency on __program__options__ if you use such options, elsewise there is none.

[endsect]

[section:basic Building a plugin]

[def __break_point__  [classref mw::gdb::break_point mw::gdb::break_point]]
[def __unique_ptr__  [@http://en.cppreference.com/w/cpp/memory/unique_ptr std::unique_ptr]]
[def __vector__  [@http://en.cppreference.com/w/cpp/container/vector std::vector]]
[def __program_options__  [@http://www.boost.org/doc/libs/release/doc/html/boost/program_options/options_description.html boost::program_options::options_description]]

Your plugin only needs to implement the break_points you want to use and return them in a specially named function, given below.

    __vector__<__unique_ptr__<__break_point__>> mw_gdb_setup_bps();

This function will return your [classref mw::gdb::break_point break_point] implementations.

Additionally you can add program options that shall be passed to your plugin you need to add another function, which looks like this.

    __program_options__ mw_gdb_setup_options();

This function will return your added program options.

To assert the function signatures and linkage is correct, the functions are declared in 
[headerref mw/gdb/plugin.hpp mw/gdb/plugin.hpp], which you should include.

[note You can use global variables without any problems, since the library is dynamically loaded. 
That means that there will be no link-conflicts.]
    
[endsect]

[endsect]